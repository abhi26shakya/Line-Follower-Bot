#include <Arduino.h>

#define NUM_SENSORS 8  // 8-channel IR sensor array
#define MAX_PATHS 10   // Maximum paths to store

int sensorPins[NUM_SENSORS] = {A7, A6, A5, A4, A3, A2, A1, A0}; // Sensor pins
int ENA = 5, IN1 = 3, IN2 = 4;
int ENB = 6, IN3 = 7, IN4 = 8;
bool visitedPaths[MAX_PATHS] = {false};  
int pathStack[MAX_PATHS], stackTop = -1;  // Stack for backtracking

// Ultrasonic Sensor Pins (for obstacle detection)
const int trigPin = 10;
const int echoPin = 11;

// Motor movement functions
void moveForward() {
    analogWrite(ENA, 63);  // Speed for motor A
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);

    analogWrite(ENB, 63);  // Speed for motor B
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
}

void stopMotors() {
    analogWrite(ENA, 0);  // Stop motor A
    analogWrite(ENB, 0);  // Stop motor B
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, LOW);
}

void reverse() {
    analogWrite(ENA, 80);  // Reverse speed for motor A
    analogWrite(ENB, 80);  // Reverse speed for motor B
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
    delay(100);
}

void turnRight() {
    stopMotors();
    delay(100);
    analogWrite(ENA, 80);  // Motor A moves forward
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);

    analogWrite(ENB, 0);  // Motor B moves backward
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    delay(500);
    stopMotors();
}

void turnLeft() {
    stopMotors();
    delay(100);
    analogWrite(ENA, 0);  // Motor A moves backward
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);

    analogWrite(ENB, 80);  // Motor B moves forward
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    delay(500);
    stopMotors();
}

void rotate180() {
    analogWrite(ENA, 80);
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);

    analogWrite(ENB, 80);
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    delay(1000);
    stopMotors();
}

// Check if line is detected by any of the sensors
bool isLineDetected() {
    for (int i = 0; i < NUM_SENSORS; i++) {
        if (analogRead(sensorPins[i]) > 1000) {  // If line (black surface) detected
            return true;
        }
    }
    return false;
}

// Stack management for backtracking
void pushPath(int direction) {
    if (stackTop < MAX_PATHS - 1) {
        pathStack[++stackTop] = direction;
    }
}

int popPath() {
    if (stackTop >= 0) {
        return pathStack[stackTop--];
    }
    return -1;  // No path to pop
}

// Function to measure the distance from the ultrasonic sensor
long measureDistance() {
    // Send a pulse to trigger the sensor
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);

    // Read the pulse duration
    long duration = pulseIn(echoPin, HIGH);

    // Calculate the distance (duration * speed of sound) / 2
    long distance = (duration / 2) / 29.1;  // 29.1 is the speed of sound in cm/us

    return distance;
}

void setup() {
    Serial.begin(9600);

    pinMode(ENA, OUTPUT);
    pinMode(IN1, OUTPUT);
    pinMode(IN2, OUTPUT);
    pinMode(ENB, OUTPUT);
    pinMode(IN3, OUTPUT);
    pinMode(IN4, OUTPUT);

    for (int i = 0; i < NUM_SENSORS; i++) {
        pinMode(sensorPins[i], INPUT);
    }

    pinMode(trigPin, OUTPUT);
    pinMode(echoPin, INPUT);

    stopMotors();  // Initially stop the motors
}

void loop() {
    // Read sensor values
    int leftMost = analogRead(sensorPins[0]);
    int left = analogRead(sensorPins[1]);
    int centerLeft = analogRead(sensorPins[2]);
    int center = analogRead(sensorPins[3]);
    int centerRight = analogRead(sensorPins[4]);
    int right = analogRead(sensorPins[5]);
    int rightMost = analogRead(sensorPins[6]);
    int farRight = analogRead(sensorPins[7]);

    // Check for obstacles using ultrasonic sensor
    long distance = measureDistance();
    Serial.print("Distance: ");
    Serial.println(distance);

    // If obstacle is detected (e.g., distance < 15 cm)
    if (distance < 15) {
        Serial.println("Obstacle detected, rotating 180 degrees.");
        rotate180();
    }
    // No line detected, stop and reverse
    else if (!isLineDetected()) {
        stopMotors();
        reverse();  // Reverse if no line is detected
    }
    // Move forward if center sensors detect line
    else if (center < 1000 || centerRight < 1000) {
        moveForward();
        pushPath(1);  // Forward direction stored
    }
    // Turn right if right side detects line
    else if (rightMost > 1000 || right > 1000 || farRight > 1000) {
        turnRight();
        pushPath(3);  // Right turn direction stored
    }
    // Turn left if left side detects line
    else if (leftMost > 1000 || left > 1000 || centerLeft > 1000) {
        turnLeft();
        pushPath(2);  // Left turn direction stored
    }
    // No line detected but still on the path, rotate 180 degrees (U-turn)
    else {
        int lastDirection = popPath();
        if (lastDirection == 1) {
            turnLeft();
        }
        else if (lastDirection == 2) {
            turnRight();
        }
        else {
            moveForward();
        }
    }

    delay(600);  // Delay for smooth operation
}
